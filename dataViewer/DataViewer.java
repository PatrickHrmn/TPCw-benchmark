/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataViewer.java
 *
 * Created on Jan 25, 2010, 12:27:18 AM
 */
package dataViewer;

import java.awt.Color;
import java.awt.ScrollPane;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import org.apache.cassandra.db.SuperColumn;
import org.apache.cassandra.service.Column;
import org.apache.cassandra.service.Cassandra.Client;
import org.apache.cassandra.service.ColumnOrSuperColumn;
import org.apache.cassandra.service.ColumnParent;
import org.apache.cassandra.service.ColumnPath;
import org.apache.cassandra.service.ConsistencyLevel;
import org.apache.cassandra.service.InvalidRequestException;
import org.apache.cassandra.service.KeySlice;
import org.apache.cassandra.service.NotFoundException;
import org.apache.cassandra.service.SlicePredicate;
import org.apache.cassandra.service.SliceRange;
import org.apache.cassandra.service.TimedOutException;
import org.apache.cassandra.service.UnavailableException;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransportException;

/**
 *
 * @author pedro
 */
public class DataViewer extends javax.swing.JFrame {

    static Client client;
    String Keyspace;
    TreeMap<String, Integer> total_keys = new TreeMap<String, Integer>();
    TreeMap<String, Integer> alive_keys = new TreeMap<String, Integer>();

    /** Creates new form DataViewer */
    public DataViewer() {
        initComponents();


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        TabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        adress_TF = new javax.swing.JTextField();
        port_Tf = new javax.swing.JTextField();
        KeySpace_TF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane1.setBottomComponent(TabbedPane);

        jButton1.setText("View Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        adress_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adress_TFActionPerformed(evt);
            }
        });

        KeySpace_TF.setText("Tpcw");

        jLabel1.setText("Adress");

        jLabel2.setText("Port");

        jLabel3.setText("KeySpace");

        jButton2.setText("Delete CF");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete All CF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Show Empty Lines");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(port_Tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(97, 97, 97)
                        .add(jButton1))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, KeySpace_TF)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, adress_TF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .add(jCheckBox1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(adress_TF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(port_Tf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel2)))
                            .add(jButton3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(KeySpace_TF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(jButton2)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jCheckBox1)
                        .add(12, 12, 12)
                        .add(jButton1)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            int port = 9160;
            TSocket socket = new TSocket("localhost", port);
            TProtocol prot = new TBinaryProtocol(socket);
            client = new Client(prot);
            socket.open();
            viewData();
        } catch (TTransportException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        }



    }//GEN-LAST:event_jButton1ActionPerformed

    private void adress_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adress_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adress_TFActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selIndex = TabbedPane.getSelectedIndex();
        JTable table = (JTable) ((JViewport) ((JScrollPane) TabbedPane.getComponentAt(selIndex)).getComponent(0)).getComponent(0);
        int rowC = table.getRowCount();

        System.out.println("Removing CF:" + TabbedPane.getTitleAt(selIndex) + "  R:" + rowC);
        String CFremove = TabbedPane.getTitleAt(selIndex);

        ArrayList<String> keyList = new ArrayList<String>();
        for (int rn = 0; rn < (rowC); rn++) {
            keyList.add((String) table.getValueAt(rn, 0));
        }


        removeRows(CFremove, keyList, ConsistencyLevel.QUORUM);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    public void viewData() {

        TabbedPane.removeAll();

        String keyspace = KeySpace_TF.getText();
        Keyspace = keyspace;
        try {
            Map<String, Map<String, String>> info = client.describe_keyspace(keyspace);
            for (String CF : info.keySet()) {
                JTable table = new javax.swing.JTable();
                JScrollPane pane = new JScrollPane(table);
                //table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                table.setGridColor(Color.BLACK);
                TabbedPane.add(CF, pane);
                ShowValues(CF, keyspace, table);
            }
            showStatus();
            JOptionPane.showMessageDialog(null, "Done", "Data Collected", JOptionPane.INFORMATION_MESSAGE);

        } catch (NotFoundException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        }



    }

    public void showStatus() {
        JTable table = new javax.swing.JTable();
        JScrollPane pane = new JScrollPane(table);
        //table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setGridColor(Color.BLACK);
        TabbedPane.add("Status", pane);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addColumn("Column Family");
        model.addColumn("Total keys");
        model.addColumn("Undeleted keys");

        int i = 0;
        for (String cf : total_keys.keySet()) {
            model.addRow((java.util.Vector) null);
            model.setValueAt(cf, i, 0);
            model.setValueAt(total_keys.get(cf), i, 1);
            model.setValueAt(alive_keys.get(cf), i, 2);
            i++;
        }
    }

    public void ShowValues(String column_family, String Keyspace, javax.swing.JTable table) {
        try {
            SlicePredicate predicate = new SlicePredicate();
            SliceRange range = new SliceRange("".getBytes(), "".getBytes(), false, 1000);

            ColumnParent parent = new ColumnParent(column_family);
            predicate.setSlice_range(range);

            boolean showEmptyLines = jCheckBox1.isSelected();


            boolean all_found = false;
            boolean insert = true;

            String last_key = "";
            int i = 0;
            int total_keys_n = 0;
            int alive_keys_n = 0;

            while (!all_found) {

                List<KeySlice> keys = client.get_range_slice(Keyspace, parent, predicate, last_key, "", 2000, ConsistencyLevel.ONE);

                total_keys_n += keys.size();
                System.out.println("Alayzing CF: " + column_family + " total keys: " + total_keys_n + " alive keys: " + alive_keys_n);
                if (keys.size() < 2000) {
                    all_found = true;
                } else {
                    last_key = keys.get(keys.size() - 1).key;
                }



                for (KeySlice Skey : keys) {
                    DefaultTableModel model = (DefaultTableModel) table.getModel();

                    // List<ColumnOrSuperColumn> line = client.get_slice(Keyspace, Skey.key, parent, predicate, ConsistencyLevel.ONE); ///Skey.getColumns();
                    List<ColumnOrSuperColumn> line = Skey.getColumns();
                    if (!line.isEmpty()) {
                        alive_keys_n++;
                    }


                    if (insert) {
                        if (!line.isEmpty() || showEmptyLines) {


                            if (model.getColumnName(0) == null || (!model.getColumnName(0).equals("#"))) {
                                model.addColumn("#");
                            }
                            if (model.getColumnName(1) == null || (!model.getColumnName(1).equals("Key"))) {
                                model.addColumn("Key");
                            }

                            model.addRow((java.util.Vector) null);
                            model.setValueAt(i + 1, i, 0);
                            model.setValueAt(Skey.key, i, 1);


                            for (ColumnOrSuperColumn column : line) {


                                if (column.isSetColumn()) {

                                    Column c = column.getColumn();


                                    if (c != null) {
                                        String column_name = new String(c.getName());
                                        boolean found = false;
                                        int cn = 0;
                                        for (cn = 0; cn < model.getColumnCount(); cn++) {
                                            if (column_name.equals(model.getColumnName(cn))) {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (found) {
                                            model.setValueAt((toObject(c.getValue())).toString(), i, cn);
                                        } else {
                                            model.addColumn(column_name);
                                            model.setValueAt((toObject(c.getValue())).toString(), i, model.getColumnCount() - 1);
                                        }

                                    }
                                    //  builder.append(" Name: " + new String(c.getName()) + " Value: " + new String(c.getValue()) + "||");


                                }
                                else if(column.isSetSuper_column()){


                                    org.apache.cassandra.service.SuperColumn c = column.getSuper_column();



                                    if (c != null) {
                                        String column_name = new String(c.getName());
                                        boolean found = false;
                                        int cn = 0;
                                        for (cn = 0; cn < model.getColumnCount(); cn++) {
                                            if (column_name.equals(model.getColumnName(cn))) {
                                                found = true;
                                                break;
                                            }
                                        }
                                      //  if (found) {
                                       //     model.setValueAt((toObject(c.getValue())).toString(), i, cn);
                                       // } else {
                                       //     model.addColumn(column_name);
                                        //    model.setValueAt((toObject(c.getValue())).toString(), i, model.getColumnCount() - 1);
                                       // }

                                    }

                                }
                            }

                            i++;
                            if (i > 8000) {
                                insert = false;
                            }
                        }
                    }
                    // System.out.println("Key on column: " + key + "with values: " + builder.toString());

                }

            }
            total_keys.put(column_family, total_keys_n);
            alive_keys.put(column_family, alive_keys_n);


        } catch (TimedOutException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidRequestException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnavailableException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static Object toObject(byte[] bytes) {
        Object object = null;
        try {
            object = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes)).readObject();
        } catch (IOException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        }

        return object;
    }

    public void truncate(String column_family, int number_keys, ConsistencyLevel write_con) {
        System.out.println("Removing ColumnFamily:" + column_family + "Number of keys: " + number_keys);
        try {

            SlicePredicate predicate = new SlicePredicate();
            SliceRange range = new SliceRange("".getBytes(), "".getBytes(), false, number_keys);
            ColumnParent parent = new ColumnParent(column_family);
            predicate.setSlice_range(range);
            //List<String> keys = client.get_key_range(Keyspace, column_family, "", "", number_keys, ConsistencyLevel.ONE);
            List<KeySlice> keys = client.get_range_slice(Keyspace, parent, predicate, "", "", number_keys, ConsistencyLevel.ONE);
            if (keys.isEmpty()) {
                System.out.println("The key range is empty");
            }
            // Map<String, List<ColumnOrSuperColumn>> results = client.multiget_slice(Keyspace, keys, parent, predicate, ConsistencyLevel.ONE);
            ColumnPath path = new ColumnPath(column_family);
            for (KeySlice key : keys) {
                client.remove(Keyspace, key.key, path, System.currentTimeMillis(), write_con);
            }
        } catch (TimedOutException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidRequestException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnavailableException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void removeRows(String column_family, List<String> keys, ConsistencyLevel write_con) {
        System.out.println("Removing ColumnFamily:" + column_family + "Number of keys: " + keys.size());
        try {

            ColumnPath path = new ColumnPath(column_family);
            for (String key : keys) {
                client.remove(Keyspace, key, path, System.currentTimeMillis(), write_con);
            }
        } catch (TimedOutException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidRequestException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnavailableException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TException ex) {
            Logger.getLogger(DataViewer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new DataViewer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField KeySpace_TF;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JTextField adress_TF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField port_Tf;
    // End of variables declaration//GEN-END:variables
}
